name: Process Excel to JSON

# Trigger when Excel file in data/ folder is updated
on:
  push:
    paths:
      - 'data/*.xlsx'
      - 'data/*.xls'
  workflow_dispatch:

jobs:
  convert-excel:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install xlsx@https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz
        
    - name: Convert Excel to JSON
      run: |
        node -e "
        const XLSX = require('xlsx');
        const fs = require('fs');
        const path = require('path');
        
        // Find Excel files in data directory
        const dataDir = './data';
        const files = fs.readdirSync(dataDir).filter(f => f.match(/\.(xlsx?|xls)$/i));
        
        if (files.length === 0) {
          console.log('No Excel files found in data directory');
          process.exit(0);
        }
        
        // Use the first Excel file found
        const excelFile = path.join(dataDir, files[0]);
        console.log('Processing:', excelFile);
        
        try {
          // Read the Excel file
          const workbook = XLSX.readFile(excelFile);
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          
          // Convert to JSON
          const rawData = XLSX.utils.sheet_to_json(worksheet);
          console.log('Found', rawData.length, 'rows in Excel file');
          
          // Transform data to expected format
          const sessions = rawData.map((row, index) => {
            // Map specific Excel column names to standard fields
            const id = row['Unique ID'] || row.ID || row.Id || generateId();
            const title = row['Session Title*'] || row['Session Title'] || row.Title || row.SESSION || 'Untitled Session';
            const track = row['1st Filter Name'] || row.Track || row.TRACK || 'General';
            const startDateTime = row['Start Date & Time\nMM/DD/YYYY 12H'] || row['Start Date & Time'] || row.Start || '';
            const endDateTime = row['End Date & Time\nMM/DD/YYYY 12H'] || row['End Date & Time'] || row.End || '';
            const room = row['Sessions Main Location'] || row.Room || row.Location || 'â€”';
            const speaker = row['(Email, Session-Role)'] || row.Speaker || row.Presenter || 'â€”';
            const level = row['2nd Filter Name'] || row.Level || 'All';
            const description = row['Description'] || row.DESCRIPTION || '';
            
            // Extract day from start datetime
            let day = '';
            let start = '';
            let end = '';
            
            if (startDateTime) {
              // Parse MM/DD/YYYY format datetime
              const startDate = new Date(startDateTime);
              if (!isNaN(startDate.getTime())) {
                day = startDate.toISOString().split('T')[0]; // YYYY-MM-DD format
                start = startDate.toISOString().replace('Z', '-07:00'); // Pacific time
              }
            }
            
            if (endDateTime) {
              const endDate = new Date(endDateTime);
              if (!isNaN(endDate.getTime())) {
                end = endDate.toISOString().replace('Z', '-07:00'); // Pacific time
              }
            }
            
            
            // Handle regEnabled field - check multiple possible column names
            let regEnabled = true; // default to enabled
            const enabledValue = row.Enabled || row.enabled || row['Session Registration (Enabled/Disabled)'] || row.Registration;
            
            if (enabledValue !== undefined) {
              if (typeof enabledValue === 'boolean') {
                regEnabled = enabledValue;
              } else if (typeof enabledValue === 'string') {
                const valueStr = enabledValue.toLowerCase();
                regEnabled = valueStr.includes('enabled') || valueStr === 'true' || valueStr === '1' || valueStr === 'yes';
              } else if (typeof enabledValue === 'number') {
                regEnabled = enabledValue !== 0;
              }
            }
            
            return {
              id,
              title,
              track,
              day, // Already in YYYY-MM-DD format
              start,
              end,
              room,
              speaker,
              level,
              description,
              regEnabled
            };
          });
          
          // Filter out invalid sessions (must have title and day)
          const validSessions = sessions.filter(s => s.title && s.day);
          console.log('Processed', validSessions.length, 'valid sessions');
          
          // Create the output JSON
          const output = {
            metadata: {
              generatedAt: new Date().toISOString(),
              source: path.basename(excelFile),
              totalSessions: validSessions.length
            },
            sessions: validSessions
          };
          
          // Write to agenda.json
          fs.writeFileSync('./agenda.json', JSON.stringify(output, null, 2));
          console.log('Generated agenda.json successfully');
          
        } catch (error) {
          console.error('Error processing Excel file:', error);
          process.exit(1);
        }
        
        // Helper function to generate unique IDs
        function generateId() {
          return Math.random().toString(36).substr(2, 13);
        }
        "
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add agenda.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update agenda.json from Excel data
          
          ğŸ¤– Generated from: $(ls data/*.xlsx data/*.xls 2>/dev/null | head -1 | xargs basename)
          ğŸ“… Generated at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          "
          git push
        fi